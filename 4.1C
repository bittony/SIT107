#include "SD.h"
#include <Wire.h>
#include "RTClib.h"

#define LOG_INTERVAL 1000
#define SYNC_INTERVAL 1000
uint32_t syncTime = 0;
#define ECHO_TO_SERIAL 1

char lowLevel[] = "Low Moisture";
char okayLevel[] = "Adequate Moisture";
char *state;

RTC_PCF8523 RTC;
const int chipSelect = 10;

File logfile;

void setup()
{
    Serial.begin(9600);
    pinMode(LED_BUILTIN, OUTPUT);
    initSDcard();
    createFile();
    initRTC();

    logfile.println("millis,stamp,datetime,motion");
#if ECHO_TO_SERIAL
    Serial.println("millis,stamp,datetime,motion");
#endif //ECHO_TO_SERIAL

    pinMode(LED_BUILTIN, INPUT);
}

void loop()
{
    int val;
    val = analogRead(0);
    Serial.println(val);
    delay(5000);

    if (val <= 300)
    {
        state = lowLevel;
        digitalWrite(LED_BUILTIN, HIGH);
        delay(2000);
        digitalWrite(LED_BUILTIN, LOW);
        delay(500);
    }
    else if (val > 300)
    {
        state = okayLevel;
        digitalWrite(LED_BUILTIN, LOW);
        delay(500);
    }

    DateTime now;

    delay((LOG_INTERVAL - 1) - (millis() % LOG_INTERVAL));

    uint32_t m = millis();
    logfile.print(m);
    logfile.print(", ");
#if ECHO_TO_SERIAL
    Serial.print(m);
    Serial.print(", ");
#endif

    now = RTC.now();

    logfile.print(now.unixtime());
    logfile.print(", ");
    logfile.print(now.year(), DEC);
    logfile.print("/");
    logfile.print(now.month(), DEC);
    logfile.print("/");
    logfile.print(now.day(), DEC);
    logfile.print(" ");
    logfile.print(now.hour(), DEC);
    logfile.print(":");
    logfile.print(now.minute(), DEC);
    logfile.print(":");
    logfile.print(now.second(), DEC);
#if ECHO_TO_SERIAL
    Serial.print(now.unixtime());
    Serial.print(", ");
    Serial.print(now.year(), DEC);
    Serial.print("/");
    Serial.print(now.month(), DEC);
    Serial.print("/");
    Serial.print(now.day(), DEC);
    Serial.print(" ");
    Serial.print(now.hour(), DEC);
    Serial.print(":");
    Serial.print(now.minute(), DEC);
    Serial.print(":");
    Serial.print(now.second(), DEC);
#endif

    logfile.print(", ");
    logfile.println(state);

#if ECHO_TO_SERIAL
    Serial.print(", ");
    Serial.println(state);

#endif

    if ((millis() - syncTime) < SYNC_INTERVAL)
        return;
    syncTime = millis();

    logfile.flush();
}

void error(char const *str)
{
    Serial.print("error: ");
    Serial.println(str);

    while (1);
}

void initSDcard()
{
    Serial.print("Initializing SD card...");
    pinMode(0, OUTPUT);

    if (!SD.begin(chipSelect))
    {
        Serial.println("Card failed, or not present");
        return;
    }
    Serial.println("card initialized.");
}

void createFile()
{
    char filename[] = "MLOG00.CSV";
    for (uint8_t i = 0; i < 100; i++)
    {
        filename[4] = i / 10 + '0';
        filename[5] = i % 10 + '0';
        if (!SD.exists(filename))
        {

            logfile = SD.open(filename, FILE_WRITE);
            break; // leave the loop!
        }
    }

    if (!logfile)
    {
        error("couldnt create file");
    }

    Serial.print("Logging to: ");
    Serial.println(filename);
}

void initRTC()
{
    Wire.begin();
    if (!RTC.begin())
    {
        logfile.println("RTC failed");
#if ECHO_TO_SERIAL
        Serial.println("RTC failed");
#endif //ECHO_TO_SERIAL
    }
}
